generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  imagePublicId String?
  accounts      Account[]
  sessions      Session[]
  credentials   Credential?
  profile       Profile?
  feedbacks     Feedback[]
  interviews    Interview[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Credential {
  id        String   @id @default(cuid())
  userId    String   @unique
  password  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstname String
  lastname  String
  image     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interview {
  id                String     @id @default(cuid())
  userId            String
  position          String
  difficulty        String
  interviewType     String
  numberOfQuestions Int
  stack             String[]
  questions         Json       @default("{}")
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedbacks         Feedback[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Feedback {
  id                  String    @id @default(cuid())
  interviewId         String
  userId              String
  totalScore          Int
  categoryScores      Json
  strengths           String
  areasForImprovement String
  finalAssessment     String
  interview           Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
